// Generated by gencpp from file package1/magnitudeRequest.msg
// DO NOT EDIT!


#ifndef PACKAGE1_MESSAGE_MAGNITUDEREQUEST_H
#define PACKAGE1_MESSAGE_MAGNITUDEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace package1
{
template <class ContainerAllocator>
struct magnitudeRequest_
{
  typedef magnitudeRequest_<ContainerAllocator> Type;

  magnitudeRequest_()
    : komponenX(0.0)
    , komponenY(0.0)
    , komponenZ(0.0)  {
    }
  magnitudeRequest_(const ContainerAllocator& _alloc)
    : komponenX(0.0)
    , komponenY(0.0)
    , komponenZ(0.0)  {
  (void)_alloc;
    }



   typedef double _komponenX_type;
  _komponenX_type komponenX;

   typedef double _komponenY_type;
  _komponenY_type komponenY;

   typedef double _komponenZ_type;
  _komponenZ_type komponenZ;





  typedef boost::shared_ptr< ::package1::magnitudeRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::package1::magnitudeRequest_<ContainerAllocator> const> ConstPtr;

}; // struct magnitudeRequest_

typedef ::package1::magnitudeRequest_<std::allocator<void> > magnitudeRequest;

typedef boost::shared_ptr< ::package1::magnitudeRequest > magnitudeRequestPtr;
typedef boost::shared_ptr< ::package1::magnitudeRequest const> magnitudeRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::package1::magnitudeRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::package1::magnitudeRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::package1::magnitudeRequest_<ContainerAllocator1> & lhs, const ::package1::magnitudeRequest_<ContainerAllocator2> & rhs)
{
  return lhs.komponenX == rhs.komponenX &&
    lhs.komponenY == rhs.komponenY &&
    lhs.komponenZ == rhs.komponenZ;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::package1::magnitudeRequest_<ContainerAllocator1> & lhs, const ::package1::magnitudeRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace package1

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::package1::magnitudeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::package1::magnitudeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::package1::magnitudeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::package1::magnitudeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::package1::magnitudeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::package1::magnitudeRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::package1::magnitudeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f5d4a6861923d554ddd71d7a4562fa32";
  }

  static const char* value(const ::package1::magnitudeRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf5d4a6861923d554ULL;
  static const uint64_t static_value2 = 0xddd71d7a4562fa32ULL;
};

template<class ContainerAllocator>
struct DataType< ::package1::magnitudeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "package1/magnitudeRequest";
  }

  static const char* value(const ::package1::magnitudeRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::package1::magnitudeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 komponenX\n"
"float64 komponenY\n"
"float64 komponenZ\n"
;
  }

  static const char* value(const ::package1::magnitudeRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::package1::magnitudeRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.komponenX);
      stream.next(m.komponenY);
      stream.next(m.komponenZ);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct magnitudeRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::package1::magnitudeRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::package1::magnitudeRequest_<ContainerAllocator>& v)
  {
    s << indent << "komponenX: ";
    Printer<double>::stream(s, indent + "  ", v.komponenX);
    s << indent << "komponenY: ";
    Printer<double>::stream(s, indent + "  ", v.komponenY);
    s << indent << "komponenZ: ";
    Printer<double>::stream(s, indent + "  ", v.komponenZ);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PACKAGE1_MESSAGE_MAGNITUDEREQUEST_H
